{"version":3,"sources":["Course.tsx","CourseListing.tsx","Modal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["termNumbers","Course","scale","terms","course","max","Math","map","t","n","scaleLinear","domain","range","termBars","color","sections","term","substr","tip","width","marginRight","className","cid","title","data-tip","style","backgroundColor","CourseListing","subjectId","showGrad","useState","subject","setSubject","useEffect","fetch","process","then","resp","json","ReactTooltip","rebuild","renderedCourses","courses","filter","i","length","name","Modal","onDismiss","onClick","App","index","setIndex","undefined","selected","setSelected","winterSummer","setWinterSummer","grad","setGrad","window","localStorage","getItem","modal","setModal","setItem","String","options","subjects","value","id","label","availableTerms","startsWith","onChange","val","type","checked","marginLeft","effect","html","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uQAcMA,EAAmB,CACvB,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,QA6DQC,MA1Df,YAA2C,IAErCC,EAFYC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,OACjBC,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQH,EAAMI,KAAI,SAACC,GAAD,OAAQJ,EAAOD,MAAMK,IAAiB,OAGtEN,EADU,IAARG,EACM,SAACI,GAAD,MAAe,SAEfC,cAAsBC,OAAO,CAAC,EAAGN,IAAMO,MAAM,CAAC,UAAW,UAGnE,IAAMC,EAAWV,EAAMI,KAAI,SAACC,GAC1B,IAAIM,EAAQ,QACRC,EAAW,cACXP,KAAKJ,EAAOD,QACVC,EAAOD,MAAMK,GAAK,GACpBM,EAAQZ,EAAME,EAAOD,MAAMK,IAC3BO,EAAQ,UAAMX,EAAOD,MAAMK,GAAnB,mBAAgCJ,EAAOD,MAAMK,GAAK,EAAI,IAAM,MAEpEM,EAAQ,OACRC,EAAW,2BAIf,IAAMC,EAAI,UAAMhB,EAAYQ,EAAE,IAApB,YAA2BA,EAAES,OAAO,IAE9C,MAAO,CACLC,IAAI,GAAD,OAAKF,EAAL,gBAAiBD,GACpBD,QACAK,MAAgB,MAATX,EAAE,IAAuB,MAATA,EAAE,GAAa,GAAK,GAC3CY,YAAsB,MAATZ,EAAE,GAAa,GAAK,MAIrC,OACE,sBAAKa,UAAU,SAAf,UACE,8BACE,uBAAMA,UAAU,cAAhB,UACGjB,EAAOkB,IADV,KACiBlB,EAAOmB,WAG1B,8BACGV,EAASN,KAAI,YAAyC,IAAtCW,EAAqC,EAArCA,IAAKJ,EAAgC,EAAhCA,MAAOK,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAClC,OACE,qBACEC,UAAU,gBACVG,WAAUN,EACVO,MAAO,CACLC,gBAAiBZ,EACjBK,QACAC,0BCpBDO,MAjCf,YAA+D,IAAtCC,EAAqC,EAArCA,UAAWzB,EAA0B,EAA1BA,MAAO0B,EAAmB,EAAnBA,SAAmB,EAC9BC,mBAAyB,MADK,mBACrDC,EADqD,KAC5CC,EAD4C,KAG5DC,qBAAU,WACRC,MAAMC,qBAAA,gBAAkCP,EAAlC,UACHQ,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACL,GAAD,OAAaC,EAAWD,QAC/B,CAACH,IAEJK,qBAAU,WACRM,IAAaC,YACZ,CAACT,EAAS5B,EAAO0B,IAEpB,IAAMY,EACJV,GACAA,EAAQW,QACLC,QAAO,SAACC,GAAD,OAAOA,EAAEtB,IAAI,GAAK,KAAOO,KAChCtB,KAAI,SAACqC,GAAD,OAAO,cAAC,EAAD,CAAQxC,OAAQwC,EAAGzC,MAAOA,OAE1C,OAAK4B,EAEOU,GAA8C,IAA3BA,EAAgBI,OAK7C,gCACE,6CAAgBd,EAAQe,QACvBL,KANI,+EAFA,+C,MCRIM,MAtBf,YAAsC,IAArBC,EAAoB,EAApBA,UACf,OACE,qCACE,qBAAK3B,UAAU,eAAe4B,QAASD,IACvC,sBAAK3B,UAAU,QAAf,UACE,wBAAQA,UAAU,aAAa4B,QAASD,EAAxC,mBAGA,sBAAK3B,UAAU,eAAf,UACE,sDACA,gQCoFK6B,MA9Ef,WAAgB,IAAD,EACapB,qBADb,mBACNqB,EADM,KACCC,EADD,OAEmBtB,wBAA4BuB,GAF/C,mBAENC,EAFM,KAEIC,EAFJ,OAG2BzB,oBAAS,GAHpC,mBAGN0B,EAHM,KAGQC,EAHR,OAIW3B,oBAAS,GAJpB,mBAIN4B,EAJM,KAIAC,EAJA,OAKa7B,oBACxB,iBAAiE,WAA1D8B,OAAOC,aAAaC,QAAQ,eAAiB,YANzC,mBAKNC,EALM,KAKCC,EALD,KASb/B,qBAAU,WACRC,MAAMC,sCACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACe,GAAD,OAAWC,EAASD,QAC3B,IAEHlB,qBAAU,WACR2B,OAAOC,aAAaI,QAAQ,aAAcC,QAAQH,MACjD,CAACA,IAEJ,IAAMI,EAAO,OAAGhB,QAAH,IAAGA,OAAH,EAAGA,EAAOiB,SAAS7D,KAAI,SAACqC,GAAD,MAAQ,CAC1CyB,MAAOzB,EAAE0B,GACTC,MAAM,GAAD,OAAK3B,EAAEE,KAAP,aAAgBF,EAAE0B,GAAlB,SAGHnE,EAAQqD,EAAY,OACpBL,QADoB,IACpBA,OADoB,EACpBA,EAAOqB,eADa,OAEpBrB,QAFoB,IAEpBA,OAFoB,EAEpBA,EAAOqB,eAAe7B,QACpB,SAACC,GAAD,OAAOA,EAAE6B,WAAW,MAAQ7B,EAAE6B,WAAW,QAG/C,OACE,sBAAKpD,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CACEgD,MAAOf,EACPoB,SAAU,SAACC,GAAD,OAASpB,EAAYoB,IAC/BR,QAASA,MAGb,sBAAK9C,UAAU,UAAf,UACE,kCACE,uBACEuD,KAAK,WACLC,QAASrB,EACTkB,SAAU,kBAAMjB,GAAiBD,MAChC,IALL,wBAQA,kCACE,uBACEoB,KAAK,WACLC,QAASnB,EACTgB,SAAU,kBAAMf,GAASD,MACxB,IALL,mBAQA,wBAAQjC,MAAO,CAAEqD,WAAY,GAAK7B,QAAS,kBAAMe,GAAUD,IAA3D,8BAKJ,qBAAK1C,UAAU,WACf,qBAAKA,UAAU,UAAf,SACIlB,GAASmD,GACT,cAAC,EAAD,CACE1B,UAAY0B,EAAoBe,MAChClE,MAAOA,EACP0B,SAAU6B,KAER,sDAER,cAAC,IAAD,CAAcqB,OAAO,QAAQC,MAAM,IAClCjB,GAAS,cAAC,EAAD,CAAOf,UAAW,kBAAMgB,GAAUD,UCnF9BkB,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8eab0060.chunk.js","sourcesContent":["import React from \"react\"\nimport { scaleLinear } from \"d3-scale\"\n\ninterface Props {\n  course: ICourse\n  terms: string[]\n}\n\nexport interface ICourse {\n  cid: string\n  title: string\n  terms: any\n}\n\nconst termNumbers: any = {\n  \"0\": \"Winter\",\n  \"1\": \"Spring\",\n  \"7\": \"Summer\",\n  \"9\": \"Fall\",\n}\n\nfunction Course({ terms, course }: Props) {\n  const max = Math.max(...terms.map((t) => (course.terms[t] as number) || 0))\n  var scale: (n: number) => string\n  if (max === 1) {\n    scale = (n: number) => \"green\"\n  } else {\n    scale = scaleLinear<string>().domain([1, max]).range([\"#bfdfbf\", \"green\"])\n  }\n\n  const termBars = terms.map((t) => {\n    let color = \"white\"\n    let sections = \"No sections\"\n    if (t in course.terms) {\n      if (course.terms[t] > 0) {\n        color = scale(course.terms[t] as number)\n        sections = `${course.terms[t]} section${course.terms[t] > 1 ? \"s\" : \"\"}`\n      } else {\n        color = \"gray\"\n        sections = \"Different course title\"\n      }\n    }\n\n    const term = `${termNumbers[t[0]]} ${t.substr(1)}`\n\n    return {\n      tip: `${term}<br/>${sections}`,\n      color,\n      width: t[0] === \"0\" || t[0] === \"7\" ? 20 : 50,\n      marginRight: t[0] === \"1\" ? 10 : 1,\n    }\n  })\n\n  return (\n    <div className=\"course\">\n      <div>\n        <span className=\"courseTitle\">\n          {course.cid}: {course.title}\n        </span>\n      </div>\n      <div>\n        {termBars.map(({ tip, color, width, marginRight }) => {\n          return (\n            <div\n              className=\"termIndicator\"\n              data-tip={tip}\n              style={{\n                backgroundColor: color,\n                width,\n                marginRight,\n              }}\n            ></div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Course\n","import React, { useEffect, useState } from \"react\"\nimport ReactTooltip from \"react-tooltip\"\nimport Course, { ICourse } from \"./Course\"\n\ninterface Props {\n  subjectId: string\n  terms: string[]\n  showGrad: boolean\n}\n\ninterface Subject {\n  sid: string\n  name: string\n  courses: ICourse[]\n}\n\nfunction CourseListing({ subjectId, terms, showGrad }: Props) {\n  const [subject, setSubject] = useState<Subject | null>(null)\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + `/data/${subjectId}.json`)\n      .then((resp) => resp.json())\n      .then((subject) => setSubject(subject))\n  }, [subjectId])\n\n  useEffect(() => {\n    ReactTooltip.rebuild()\n  }, [subject, terms, showGrad])\n\n  const renderedCourses =\n    subject &&\n    subject.courses\n      .filter((i) => i.cid[7] < \"5\" || showGrad)\n      .map((i) => <Course course={i} terms={terms} />)\n\n  if (!subject) {\n    return <span>Loading...</span>\n  } else if (!renderedCourses || renderedCourses.length === 0) {\n    return <span>No courses available (they may be filtered)</span>\n  }\n\n  return (\n    <div>\n      <h2>Courses in {subject.name}</h2>\n      {renderedCourses}\n    </div>\n  )\n}\n\nexport default CourseListing\n","import React from \"react\"\n\ninterface Props {\n  onDismiss(): void\n}\n\nfunction Modal({ onDismiss }: Props) {\n  return (\n    <>\n      <div className=\"modalOverlay\" onClick={onDismiss} />\n      <div className=\"modal\">\n        <button className=\"modalClose\" onClick={onDismiss}>\n          close\n        </button>\n        <div className=\"modalContent\">\n          <h1>Important Disclaimer</h1>\n          <p>\n            I don't hold the crystal ball of course scheduling. Use this tool at\n            your own risk, and always consult with a department advisor for\n            scheduling questions or concerns. Past results do not guarantee\n            future outcomes.\n          </p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Modal\n","import React, { useEffect, useState } from \"react\"\nimport Select, { ValueType } from \"react-select\"\nimport CourseListing from \"./CourseListing\"\nimport \"./App.css\"\nimport ReactTooltip from \"react-tooltip\"\nimport Modal from \"./Modal\"\n\ninterface Index {\n  subjects: Subject[]\n  availableTerms: string[]\n}\n\ninterface Subject {\n  id: string\n  name: string\n}\n\ninterface Option {\n  value: string\n  label: string\n}\n\nfunction App() {\n  const [index, setIndex] = useState<Index>()\n  const [selected, setSelected] = useState<ValueType<Option>>(undefined)\n  const [winterSummer, setWinterSummer] = useState(false)\n  const [grad, setGrad] = useState(false)\n  const [modal, setModal] = useState(\n    () => (window.localStorage.getItem(\"disclaimed\") || \"false\") === \"false\"\n  )\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/data/index.json\")\n      .then((resp) => resp.json())\n      .then((index) => setIndex(index))\n  }, [])\n\n  useEffect(() => {\n    window.localStorage.setItem(\"disclaimed\", String(!modal))\n  }, [modal])\n\n  const options = index?.subjects.map((i) => ({\n    value: i.id,\n    label: `${i.name} (${i.id})`,\n  }))\n\n  let terms = winterSummer\n    ? index?.availableTerms\n    : index?.availableTerms.filter(\n        (i) => i.startsWith(\"1\") || i.startsWith(\"9\")\n      )\n\n  return (\n    <div className=\"App\">\n      <div className=\"topBar\">\n        <div className=\"search\">\n          <Select\n            value={selected}\n            onChange={(val) => setSelected(val)}\n            options={options}\n          />\n        </div>\n        <div className=\"options\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={winterSummer}\n              onChange={() => setWinterSummer(!winterSummer)}\n            />{\" \"}\n            Show Winter/Summer\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={grad}\n              onChange={() => setGrad(!grad)}\n            />{\" \"}\n            Show Graduate\n          </label>\n          <button style={{ marginLeft: 5 }} onClick={() => setModal(!modal)}>\n            Disclaimer\n          </button>\n        </div>\n      </div>\n      <div className=\"spacer\"></div>\n      <div className=\"results\">\n        {(terms && selected && (\n          <CourseListing\n            subjectId={(selected as Option).value}\n            terms={terms}\n            showGrad={grad}\n          />\n        )) || <div>Select a subject!</div>}\n      </div>\n      <ReactTooltip effect=\"solid\" html={true} />\n      {modal && <Modal onDismiss={() => setModal(!modal)} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}